/*
 * LIANA + NicheNet pipeline configuration
 */

// Global parameters
params {
    // Pipeline options
    input = null
    input_type = 'h5ad'  // Options: 'h5ad' for LIANA only, 'rds' for NicheNet only, 'both' for integrated analysis
    outdir = 'results'

    // Parameter for specifying the cell type column
    celltype_column = 'cell_type'

    // LIANA-specific parameters
    raw_layer = null  // Specify which layer to use as raw data (e.g., 'counts', 'raw')
    use_raw = true    // Whether to use raw data for LIANA analysis
    
    // Containers
    liana_container = 'vishoza/liana-py:latest'
    nichenet_container = 'vishoza/ccc-nichenet:latest'
    multinichenet_container = 'vishoza/ccc-nichenet:latest'
}

// Profiles
profiles {
    standard {
        process.executor = 'local'
    }
    
    slurm {
        process.executor = 'slurm'
    }
    
    sge {
        process.executor = 'sge'
        process.clusterOptions = '-P your_project'
    }
    
    conda {
        conda.enabled = true
        process {
            withName: 'LIANA_ANALYSIS' {
                conda = "${projectDir}/envs/liana.yml"
            }
            withName: 'NICHENET_ANALYSIS' {
                conda = "${projectDir}/envs/nichenet.yml"
            }
            withName: 'NICHENET_ANALYSIS_STANDALONE' {
                conda = "${projectDir}/envs/nichenet.yml"
            }
            withName: 'MULTINICHENET_ANALYSIS_STANDALONE' {
                conda = "${projectDir}/envs/multinichenet.yml"
            }
            withName: 'VISUALIZE_RESULTS' {
                conda = "${projectDir}/envs/nichenet.yml"
            }
            withName: 'VISUALIZE_LIANA_RESULTS' {
                conda = "${projectDir}/envs/nichenet.yml"
            }
            withName: 'VISUALIZE_NICHENET_RESULTS' {
                conda = "${projectDir}/envs/nichenet.yml"
            }
            withName: 'VISUALIZE_MULTINICHENET_RESULTS' {
                conda = "${projectDir}/envs/multinichenet.yml"
            }
        }
    }
    
    docker {
        docker.enabled = true
        process {
            withName: 'LIANA_ANALYSIS' {
                container = params.liana_container
            }
            withName: 'NICHENET_ANALYSIS' {
                container = params.nichenet_container
            }
            withName: 'NICHENET_ANALYSIS_STANDALONE' {
                container = params.nichenet_container
            }
            withName: 'MULTINICHENET_ANALYSIS_STANDALONE' {
                container = params.multinichenet_container
            }
            withName: 'VISUALIZE_RESULTS' {
                container = params.nichenet_container
            }
            withName: 'VISUALIZE_LIANA_RESULTS' {
                container = params.nichenet_container
            }
            withName: 'VISUALIZE_NICHENET_RESULTS' {
                container = params.nichenet_container
            }
            withName: 'VISUALIZE_MULTINICHENET_RESULTS' {
                container = params.multinichenet_container
            }
        }
    }
    
    singularity {
        singularity.enabled = true
        singularity.engineOptions = '--compatibility'
        singularity.autoMounts = true
        process {
            withName: 'LIANA_ANALYSIS' {
                container = "docker://${params.liana_container}"
            }
            withName: 'NICHENET_ANALYSIS' {
                container = "docker://${params.nichenet_container}"
            }
            withName: 'NICHENET_ANALYSIS_STANDALONE' {
                container = "docker://${params.nichenet_container}"
            }
            withName: 'MULTINICHENET_ANALYSIS_STANDALONE' {
                container = "docker://${params.multinichenet_container}"
            }
            withName: 'VISUALIZE_RESULTS' {
                container = "docker://${params.nichenet_container}"
            }
            withName: 'VISUALIZE_LIANA_RESULTS' {
                container = "docker://${params.nichenet_container}"
            }
            withName: 'VISUALIZE_NICHENET_RESULTS' {
                container = "docker://${params.nichenet_container}"
            }
            withName: 'VISUALIZE_MULTINICHENET_RESULTS' {
                container = "docker://${params.multinichenet_container}"
            }
        }
    }
    
    singularity_3_5 {
        singularity.enabled = true
        process {
            withName: 'LIANA_ANALYSIS' {
                container = "docker://${params.liana_container}"
                containerOptions = '--bind $PWD:/data'
            }
            withName: 'NICHENET_ANALYSIS' {
                container = "docker://${params.nichenet_container}"
                containerOptions = '--bind $PWD:/data'
            }
            withName: 'NICHENET_ANALYSIS_STANDALONE' {
                container = "docker://${params.nichenet_container}"
                containerOptions = '--bind $PWD:/data'
            }
            withName: 'MULTINICHENET_ANALYSIS_STANDALONE' {
                container = "docker://${params.multinichenet_container}"
                containerOptions = '--bind $PWD:/data'
            }
            withName: 'VISUALIZE_RESULTS' {
                container = "docker://${params.nichenet_container}"
                containerOptions = '--bind $PWD:/data'
            }
            withName: 'VISUALIZE_LIANA_RESULTS' {
                container = "docker://${params.nichenet_container}"
                containerOptions = '--bind $PWD:/data'
            }
            withName: 'VISUALIZE_NICHENET_RESULTS' {
                container = "docker://${params.nichenet_container}"
                containerOptions = '--bind $PWD:/data'
            }
            withName: 'VISUALIZE_MULTINICHENET_RESULTS' {
                container = "docker://${params.multinichenet_container}"
                containerOptions = '--bind $PWD:/data'
            }
        }
    }
}

// Manifest
manifest {
    name = 'LIANA-NicheNet Pipeline'
    author = 'Vishal Oza'
    homePage = 'https://github.com/vishoza/ccc-pipeline'
    description = 'Nextflow pipeline for cell-cell communication analysis using LIANA + NicheNet'
    version = '1.0.0'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.10.3'
}
