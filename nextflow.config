/*
 * LIANA + NicheNet pipeline default configuration
 */

// Global parameters
params {
    // Pipeline options
    input = null
    sender_celltype = null
    receiver_celltype = null
    outdir = 'results'
    
    // Max resources - adjusted to be more cluster-friendly
    max_memory = 64.GB
    max_cpus = 8
    max_time = 24.h
    
    // Containers
    liana_container = 'vishoza/liana-py:latest'
    nichenet_container = 'vishoza/ccc-nichenet:latest'
}

// Process resources
process {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
    
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries = 3
    maxErrors = '-1'
    
    withLabel:process_low {
        cpus = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }
    
    withLabel:process_medium {
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    withLabel:process_high {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    withLabel:process_long {
        time = { check_max( 20.h * task.attempt, 'time' ) }
    }
}

// Executor settings
executor {
    $local {
        cpus = 8
        memory = '16 GB'
    }
    $slurm {
        // Use these as defaults if not specified in submission script
        queueSize = 50
        submitRateLimit = '10 sec'
        pollInterval = '30 sec'
    }
}

// Profiles
profiles {
    standard {
        process.executor = 'local'
    }
    
    slurm {
        process.executor = 'slurm'
        // Let the account be inherited from the SBATCH directives
        // No clusterOptions defined here to allow inheritance from sbatch
    }
    
    sge {
        process.executor = 'sge'
        process.clusterOptions = '-P your_project'
    }
    
    conda {
        conda.enabled = true
        process {
            withName: 'LIANA_ANALYSIS' {
                conda = "${projectDir}/envs/liana.yml"
            }
            withName: 'NICHENET_ANALYSIS' {
                conda = "${projectDir}/envs/nichenet.yml"
            }
            withName: 'VISUALIZE_RESULTS' {
                conda = "${projectDir}/envs/nichenet.yml"
            }
        }
    }
    
    docker {
        docker.enabled = true
        process {
            withName: 'LIANA_ANALYSIS' {
                container = params.liana_container
            }
            withName: 'NICHENET_ANALYSIS' {
                container = params.nichenet_container
            }
            withName: 'VISUALIZE_RESULTS' {
                container = params.nichenet_container
            }
        }
    }
    
    singularity {
        singularity.enabled = true
        singularity.engineOptions = '--compatibility'
        singularity.autoMounts = true
        process {
            withName: 'LIANA_ANALYSIS' {
                container = "docker://${params.liana_container}"
            }
            withName: 'NICHENET_ANALYSIS' {
                container = "docker://${params.nichenet_container}"
            }
            withName: 'VISUALIZE_RESULTS' {
                container = "docker://${params.nichenet_container}"
            }
        }
    }
    
    singularity_3_5 {
        singularity.enabled = true
        // Don't use autoMounts as it might not be supported in older versions
        process {
            withName: 'LIANA_ANALYSIS' {
                container = "docker://${params.liana_container}"
                containerOptions = '--bind $PWD:/data'
            }
            withName: 'NICHENET_ANALYSIS' {
                container = "docker://${params.nichenet_container}"
                containerOptions = '--bind $PWD:/data'
            }
            withName: 'VISUALIZE_RESULTS' {
                container = "docker://${params.nichenet_container}"
                containerOptions = '--bind $PWD:/data'
            }
        }
    }
}

// Function to ensure resources don't exceed maximum
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Manifest
manifest {
    name = 'LIANA-NicheNet Pipeline'
    author = 'Vishal Oza'
    homePage = 'https://github.com/vishoza/ccc-pipeline'
    description = 'Nextflow pipeline for cell-cell communication analysis using LIANA + NicheNet'
    version = '1.0.0'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.10.3'
}
